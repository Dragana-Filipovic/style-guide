---
title: BEM
order: 2
collection: nav__fundamentals__code
template: page.jade
---
p.paragraph.
  BEM stands for Block, Element Modifier and describes a set of front end development techniques. BEM is originated by the Russian internet giant Yandex.

p.paragraph.
  We adopted the BEM methodology in the Web Design Guide. Each component defined by the Design Guidelines is implemented by one or more blocks. Therefore the CSS and HTML is aligned to BEM.
  
p.paragraph.
  This is a quick overview over the BEM methodology and how we adapted it to fit our needs. If you want to take a deep dive head over to <a href="https://bem.info/method/definitions/" class="link">bem.info</a>.


ul.list.list--unordered
 li.list__item We recommend using the same principles for your app, to enhance integration of the Web Design Guide and enhance your web development experience.

.toc
  .toc__title Table of contents
  ul.toc__anchor-navigation
    li.toc__anchor-navigation__item
      a(href='#elements').toc__anchor-navigation__link Elements
    li.toc__anchor-navigation__item
      a(href='#blocks').toc__anchor-navigation__link Blocks
    li.toc__anchor-navigation__item
     a(href='#modifiers').toc__anchor-navigation__link Modifiers
    li.toc__anchor-navigation__item
      a(href='#naming').toc__anchor-navigation__link Naming
    li.toc__anchor-navigation__item
      a(href='#independent').toc__anchor-navigation__link Independent CSS
    li.toc__anchor-navigation__item
      a(href='#javascript').toc__anchor-navigation__link Javascript

h2.heading.heading--secondary#elements Elements
 
p.paragraph.
   Elements are always part of a block and are thus context dependent. They cannot exist on their own.
 
p.paragraph.
 For example, a menu item can only exist inside a menu. Makes sense, right?
   
img(src=relative('/images/bem/elements.svg') alt="These are elements")

h2.heading.heading--secondary#blocks Blocks

p.paragraph.
  A page consists of several blocks, such as header, footer, menu and more.

p.paragraph.
  Blocks are always independent. This means that they could appear anywhere on any page or even multiple times on the same page. For example a menu block may appear once on top of the page and once on the side to create a two-step navigation.

p.paragraph.
  Blocks can contain elements and also other nested blocks to reuse functionality and minimize complexity. A block describes the order in which it's children appear.

img(src=relative('/images/bem/blocks.svg') alt="This is a block")

//h3.heading.heading--tertiary Blocks and Elements united
//img(src=relative('/images/bem/bem.svg') alt="This is a block")

h2.heading.heading--secondary#modifiers Modifiers

p.paragraph.
  Modifiers define the styling of a block or element. Every modifier has its own CSS class. This way you can use a menu block for a top navigation, and another for a side navigation and give them both the appropriate styling.

p.paragraph.
  Multiple modifiers in a block or element are allowed.

h2.heading.heading--secondary#naming Naming

p.paragraph.
  Block names must be unique within the project and element names must be unique within their block. We separate nested blocks and elements with the <code>__</code> (double lower dash) sequence and modifiers from blocks and elements with the <code>--</code> (double dash) sequence.

ul.list.list--unordered
  li.list__item Don't use names in your app, that are already used by the Web Design Guide.

h2.heading.heading--secondary#independent Independent CSS

p.paragraph.
  To achieve block independence, so that blocks can be on their own and anywhere on a page, we follow the following rules in our CSS definitions:
ul.list.list--unordered
  li.list__item HTML elements (<code>h1</code>, <code>p</code>, <code>div</code>) <strong>must not</strong> be used in CSS selectors.
  li.list__item Cascading selectors (<code>.menu.menu--item { ... }</code>) <strong>should not</strong> be used.
  li.list__item ID based selectors (<code>#menu { ... }</code>) <strong>must not</strong> be used.

h2.heading.heading--secondary#javascript Javascript

p.paragraph.
  You should apply behaviour with javascript on block level. Use CSS classes to select every instance of a block on your page.

p.paragraph.
  If you have the need, you can also write a Javascript libraray to easily access blocks and elements.

<!-- Copyright AXA Versicherungen AG 2015 -->
