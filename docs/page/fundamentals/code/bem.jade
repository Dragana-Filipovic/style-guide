---
title: BEM
order: 2
template: page.jade
---

:markdown
  BEM stands for Block, Element Modifier and describes a set of
  front end development techniques.
  BEM is originated by the Russian internet giant Yandex.

  We adopted the BEM methodology in the Web Style Guide.
  Each component defined by our guidelines is implemented by one or
  more blocks. Therefore the CSS and HTML is aligned to BEM.
  
  This is a quick overview over the BEM methodology and how we adapted
  it to fit our needs. If you want to take a deep dive head over to
  [bem.info](https://bem.info/method/definitions/).

  * We recommend using the same principles for your app,
    to enhance integration of the Web Style Guide and
    enhance your web development experience.

.toc
  .toc__title Table of contents
  ul.toc__anchor-navigation
    li.toc__anchor-navigation__item
      a(href='#elements').toc__anchor-navigation__link Elements
    li.toc__anchor-navigation__item
      a(href='#blocks').toc__anchor-navigation__link Blocks
    li.toc__anchor-navigation__item
     a(href='#modifiers').toc__anchor-navigation__link Modifiers
    li.toc__anchor-navigation__item
      a(href='#naming').toc__anchor-navigation__link Naming
    li.toc__anchor-navigation__item
      a(href='#independent-css').toc__anchor-navigation__link Independent CSS
    li.toc__anchor-navigation__item
      a(href='#javascript').toc__anchor-navigation__link Javascript

:markdown
  # Elements

  Elements are always part of a block and are thus context dependent.
  They cannot exist on their own.

  For example, a menu item can only exist inside a menu. Makes sense, right?

  ![These are elements](/images/bem/elements.svg)

  # Blocks

  A page consists of several blocks, such as header, footer, menu and more.

  Blocks are always independent. This means that they could appear
  anywhere on any page or even multiple times on the same page.
  For example a menu block may appear once on top of the page and once
  on the side to create a two-step navigation.

  Blocks can contain elements and also other nested blocks to reuse
  functionality and minimize complexity.
  A block describes the order in which it's children appear.

  ![This is a block](/images/bem/blocks.svg)

  # Modifiers

  Modifiers define the styling of a block or element.
  Every modifier has its own CSS class.
  This way you can use a menu block for a top navigation,
  and another for a side navigation and give them both
  the appropriate styling.

  Multiple modifiers in a block or element are allowed.

  # Naming

  Block names must be unique within the project and element names must
  be unique within their block.
  We separate nested blocks and elements
  with the `__` (double lower dash) sequence and modifiers
  from blocks and elements with the `--`
  (double dash) sequence.

  * Don't use names in your app, that are already used by the Web Style Guide.

  #Â Independent CSS
  
  To achieve block independence, so that blocks can be on
  their own and anywhere on a page, we follow
  the following rules in our CSS definitions:
  
  * HTML elements (`h1`, `p`, `div`) _must not_ be used in CSS selectors.
  * Cascading selectors (`.menu.menu--item { ... }`) _should not_ be used.
  * ID based selectors (`#menu { ... }`) _must not_ be used.

  # JavaScript

  You should apply behaviour with javascript on block level.
  Use CSS classes to select every instance of a block on your page.

  If you have the need, you can also write a JavaScript
  libraray to easily access blocks and elements.

//- Copyright AXA Versicherungen AG 2015
