---
title: Getting started
order: 1
collection: nav__fundamentals__code
template: page.jade
---
  
aside.callout
  h2.callout__heading Feedback appreciated!
  p.paragraph
    | The Web Styleguide aims to support you in building awesome
    | responsive web sites and apps. If you struggle using the assets, 
    | miss a component or face any other issue please feel free to
    = ' '
    a(href=config.repository.url, title=config.repository.name).link file an issue on github
    |  or 
    a(data-uv-trigger, data-uv-mode="contact").link use the feedback form
    | .

//- h2.heading.heading--secondary What is the developer toolkit?
//- p.paragraph
//-   | The Developer Toolkit is a library of HTML, CSS, JavaScript and other
//-   | resources you can include in your products.
//-   | It provides you components to help you create awesome features.
//-   | The components are aligned to the&nbsp;
//-   a(href=relative('/design')).link Design Guidelines
//-   | . Please read the Design Guidelines carefully before you design a new
//-   | User Interface.

h2.heading.heading--secondary Getting the web design guide

h3.heading.heading--tertiary Good old direct download

p.paragraph
  | You can&nbsp;
  a(href=relative('/downloads/' + package.name + '-dist-'+package.version+'.tar.gz'), title="Latest Release Package").link download the latest release package here.

h3.heading.heading--tertiary Use npm (recommended)

p.paragraph.
  Since we use npm for the web design guide we recommend
  the use of npm in your project as well. You'll get the
  web design guide with a simple npm install as follows.

.highlight
  pre.highlight__listing
    code npm install --save-dev http://design.axa.ch/downloads/#{package.name}-#{package.version}.tgz

h3.heading.heading--tertiary Use bower

p.paragraph.
  If you want to use the web design guide install it using a simple bower install.

.callout.callout--danger
  p.paragraph.
    The Webserver hosting the style guide doesn't like the default user agent used by bower.
    Therefore you need to configure a custom user agent string in your .bowerrc.

  .highlight: pre.highlight__listing.hljs: code.json
    :highlight
      {
        "user-agent": "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36"
      ...
      }

  p.paragraph.
    Have a look at the <a href="http://bower.io/docs/config/#user-agent" class="link" >bower config
    documentation</a> for further information.

.highlight
  pre.highlight__listing
    code bower install http://design.axa.ch/downloads/#{package.name}-dist-#{package.version}.tar.gz --save

h2.heading.heading--secondary What's included

p.paragraph.
  The web styleguide is delivered in two diffrent flavours.
  The npm package and the dist package (raw download and bower).
  Compare the structures below.

  They both contain the following assets.

dl
  dt css
  dd.
    The precompiled CSS assets for `style.less` and `normalize.less`.
    We recommend using the LESS assets to maintain configurability
    (see customization section below).

  dt docs
  dd A copy of the docs you're currently reading.

  dt fonts
  dd.
    Here you'll find the icon font used within the web design guide
    in various formats.

  dt images
  dd.
    Contains all image assets used by the web design guide.

  dt jquery
  dd.
    Compiled (from CoffeeScript) and optionally minified jQuery plugins.

  dt less
  dd.
    The raw LESS files you can use to compile your custom CSS assets.

  //dt ng
  //dd.
  //  Angular directives (JS and HTML) files.

:markdown

  <div class="l-row" >
    <div class="l-half" >
      <h3 class="heading heading--tertiary" >npm package</h3>
      <pre class="highlight"><code class="highlight__listing hljs ">axa-web-design-guide/
  ├── dist/
  │   ├── less/
  │   ├── js/
  │   ├── images/
  │   ├── fonts/
  │   ├── docs/
  │   └── css/
  ├── README.md
  ├── package.json
  ├── LICENSE.md
  └── .npmignore</code></pre>
    </div>
    <div class="l-half" >
      <h3 class="heading heading--tertiary" >direct download & bower package</h3>
      <pre class="highlight"><code class="highlight__listing hljs ">axa-web-design-guide/
  ├── less/
  ├── js/
  ├── images/
  ├── fonts/
  ├── docs/
  │── css/
  ├── README.md
  ├── LICENSE.md
  └── bower.json</code></pre>
    </div>
  </div>
          
  # Using the Web Styleguide

  ## Basic template

  ```html
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title>AXA Web Styleguide - Basic template</title>

      <!-- meta tags as explained in the recommendations page -->
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width, minimum-scale=1.0, maximum-scale=1.0">

      <!-- add polyfills, SEO and Social metadata tags here -->

      <!-- include the procided style.min.css or your own css assets -->
      <link href="css/style.min.css" rel="stylesheet">
    </head>
    <body>
      <h1>Hello, world!</h1>

      <!-- optional: add jQuery plugins -->
      <script src="libs/jquery/1.11.1/jquery.min.js"></script>
      <script src="libs/moment.js/2.9.0/moment.js"></script>
      <script src="js/style.all.min.js"></script>

    </body>
  </html>
  ```

  Please have a look at the following pages for optimization.

  - [Browser support](/fundamentals/code/browser-support.html)
  - [FAQ](/fundamentals/code/faq.html)
  <!--- [Search Engine Optimisation (SEO)](/fundamentals/code/seo.html)-->
  <!--- [Social metadata](/fundamentals/code/social-metadata.html)-->

  # LESS/CSS

  You can either use the CSS files provided in the packages or compile the LESS
  assets on your own.

  ## Using the CSS files

  We do not recommend using the precompiled CSS files in a productive
  environment since you can't configure anything and need to add the
  whole bloat of CSS even if you just need a tiny bit.

  To use the precompiled CSS files just reference them from your HTML
  (see the tempalte above).

  When using the CSS files make sure that the assets referenced from the
  CSS files (e.g. images at `../images`) are available.

  ## Compiling the LESS files on your own

  Compiling the LESS files is the recommended approach since you gain
  control over paths and what to include or not.

  - Inculde the blocks you need and omit those you don't need
  - Customize LESS variables
  - Use custom post processing

  ### Basic LESS template

  <p class="callout" >
    The following examples assume that you have added the
    `less/` folder of the Web Styleguide to the LESS compilers
    paths.
  </p>

  #### Including needed elements only

  `normalize` and `basics` are the only `@import`s required. Add other
  `@import`s as needed.
  
  ```less
  // required
  @import 'normalize';
  @import 'style/basics';

  // add utils, grid and blocks as needed
  @import 'style/utils';
  @import 'style/grid';

  @import 'style/blocks/header';
  @import 'style/blocks/footer';
  ```

  #### Including the entire Web Styleguide

  This approach may be used for prototyping but it is not recommended
  in a productive setup since it will add a lot of CSS markup you don't need.

  ```less
  @import 'normalize';
  @import 'style';
  ```

  ### LESS variables

  Have a look at the well commented `less/variables.less` file to see what
  variables you can override.

  ### Post processing

  Add
  [autorefixer](https://github.com/postcss/autoprefixer) and
  [pseudoelements](https://www.npmjs.com/package/postcss-pseudoelements)
  to your build to make
  the css output work in older browsers.

  Have a look at the
  [postcss plugin list](https://github.com/postcss/postcss#plugins)
  for further processing.

  # jQuery plugins

  Use the jQuery plugins to give your app some interactivity. Note that
  these plugins are an early draft and every contribution is highly
  appreciated.

   You can include each plugin individually or the
   `axa-wsg.jquery.all(.min).js` to get them all.



// Copyright AXA Versicherungen AG 2015
