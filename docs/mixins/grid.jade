---
title: Grid
slug: grid
collection: mixins
order: 2
---

p.
  The grid is a central component which enables you to position
  multiple elements in one row. This can be done for all the different
  device and screen sizes.

p
  | If you can't make use of the
  | <a href="visuals.html#grid">predefined grid classes</a>
  | you can use the grid mixins which are documented here.

h3 Create a custom container

p.
  The container is here to contain the whole content of the page.
  It ensures that the page doesn't exceed a certain width and that
  everything is centered on a large device.

p
  To transform all container functionality into a custom CSS class,
  just use the following mixin:

pre.hljs: code.less
  :highlight
    .make-container([@max-width, [@gutter]]);

dl
  dt @max-width
  dd.
    This width will never be exceeded by the container. The default value
    is <code>auto</code> which signals that the container will stretch to
    infinity.
  dt @gutter
  dd.
    Half the specified gutter equals to the left or right padding.
    If no value is provided, the default value
    <code>@grid-gutter-width</code> is taken.

h3 Create a custom row

pre.hljs: code.less
  :highlight
    .make-row([@gutter]);

dl
  dt @gutter
  dd.
    The space that will be used between the columns of the row. Half the gutter
    is used to do the inverse margin on the left and right side.
    If no value is provided, the default value
    <code>@grid-gutter-width</code> is taken.

h3 Create some custom columns

pre.hljs: code.less
  :highlight
    .make-col(@columns, [@device, [@gutter]]);

dl
  dt @columns
  dd.
    Specifies how many grid columns the CSS class should span. The maximum is
    saved in the general variable <code>@grid-columns</code> and is currently
    set to 12.
  dt @device
  dd.
    Specifies to which device the CSS properties should respond to.
    The default value is <code>small</code> which corresponds to mobile
    devices.
  dt @gutter
  dd.
    The space that will be used between the columns of the row. Half the gutter
    is used to do the padding on the left and right side of the column.
    If no value is provided, the default value
    <code>@grid-gutter-width</code> is taken.

h3 Skip columns

pre.hljs: code.less
  :highlight
    .make-col-offset(@columns, [@device]);

dl
  dt @columns
  dd.
    Specifies how many grid columns should be left empty before
    the actual grid column appears in the grid.
  dt @device
  dd.
    Specifies to which device the CSS properties should respond to.
    The default value is <code>small</code> which corresponds to mobile
    devices.

h3 Push a column away, push it over another

pre.hljs: code.less
  :highlight
    .make-col-push(@columns, [@device]);

dl
  dt @columns
  dd.
    Specifies how many grid columns the actual column should be pushed
    away (to the right). This takes the column out of its context and
    even enables to move columns over others.
  dt @device
  dd.
    Specifies to which device the CSS properties should respond to.
    The default value is <code>small</code> which corresponds to mobile
    devices.

h3 Pull a column back, pull it over another

pre.hljs: code.less
  :highlight
    .make-col-pull(@columns, [@device]);

dl
  dt @columns
  dd.
    Specifies how many grid columns the actual column should be pulled
    back (to the left). This takes the column out of its context and
    even enables to move columns over others.
  dt @device
  dd.
    Specifies to which device the CSS properties should respond to.
    The default value is <code>small</code> which corresponds to mobile
    devices.
