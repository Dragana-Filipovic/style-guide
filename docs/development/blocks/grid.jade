---
title: Grid system
template: development.jade
---

p.lead
  | The Developer Toolkit includes a responsive, mobile-first fluid grid system that
  | scales up to 12 columns as the device or viewport size increases.
  | It includes an extensive collection of predefined CSS classes for
  | easy layout options as well as
  a(href=relative("/development/mixins/grid.html")).link powerful mixins
  |  for you to generate more semantic layouts.

h2.heading.heading--secondary Introduction

p.paragraph.
  Use the grid system to create page layouts consisting of a series of
  rows and columns. The columns house your content. Here is an example:

:sample
  .l-container
    .l-row
      .l-col.l-col--medium-12
        .box Title
    .l-row
      .l-col.l-col--medium-8
        .box Main
      .l-col.l-col--medium-4
        .box Side

p.paragraph.
  Your content and every row you make should be placed in a
  <code>.l-container</code>, directly or indirectly. The container
  ensures that the content is properly aligned and padding is correctly
  set.

p.paragraph.
  Use <code>.l-row</code> to create horizontal groups of columns.
  Consider that only columns may be immediate children of rows.

p.paragraph.
  You get two types of predefined column classes. With generic columns
  like <code>.l-col.l-col--6</code> or <code>.l-col.l-col--medium-3</code>
  you can quickly produce very flexible layouts.
  Semantic columns like
  <code>.l-primary</code> or <code>.l-half</code> allow you to
  build standard layouts with responsive behavior.

h2.heading.heading--secondary Grid options

table.table
  thead
    tr.table__header
      th.table__header__info
      th.table__header__info small
      th.table__header__info medium
      th.table__header__info large
  tbody.table__content
    tr.table__row
      th.table__row__item Breakpoint
      td.table__row__item < 768px
      td.table__row__item ≥ 768px
      td.table__row__item ≥ 1024px
    tr.table__row
      th.table__row__item Grid behavior
      td.table__row__item Horizontal at all times
      td.table__row__item(colspan="2").
        Collapsed to start, horizontal above breakpoints
    tr.table__row
      th.table__row__item CSS class prefix
      td.table__row__item
        code .l-col--*
      td.table__row__item
        code .l-col--medium-*
      td.table__row__item
        code .l-col--large-*
    tr.table__row
      th.table__row__item Number of columns
      td.table__row__item(colspan="3")
        .table__row__item__content 12

h2.heading.heading--secondary Column classes

p.paragraph.
  With the inclusion of the Developer Toolkit you get several predefined
  CSS classes. The <code>.l-container</code> and
  <code>.l-row</code> are fundamental for creating a grid.
  When creating grid columns you have two possibilities. You can
  take the
  <a href="#generic-classes" class="link" >generic CSS classes</a> or use the
  <a href="#semantic-classes" class="link" >semantic ones</a>. The latter have an
  already predefined responsive behavior.

p.paragraph Here you see a thorough example with generic classes:

:sample
  .l-row
    .l-col.l-col--medium-12
      code.box .l-col<br>.l-col--medium-12
  .l-row
    .l-col.l-col--medium-8
      code.box .l-col<br>.l-col--medium-8
    .l-col.l-col--medium-4
      code.box .l-col<br>.l-col--medium-4

p.paragraph Next is an example with semantic classes:

:sample
  .l-row
    .l-full
      code.box .l-full
  .l-row
    .l-primary
      code.box .l-primary
    .l-secondary
      code.box .l-secondary
  .l-row
    - for (var i = 0; i < 2; i++) {
      .l-half
        code.box .l-half
    - }
  .l-row
    - for (var i = 0; i < 3; i++) {
      .l-third
        code.box .l-third
    - }
  .l-row
    - for (var i = 0; i < 4; i++) {
      .l-fourth
        code.box .l-fourth
    - }
  .l-row
    - for (var i = 0; i < 6; i++) {
      .l-thumbnail
        code.box .l-thumbnail
    - }

h2.heading.heading--secondary Nesting grids

p.paragraph.
  It can sometimes be practical to have one grid contained in another.
  The grid is built in a way that when you nest them, no multiple
  gutters will add to each other, thus preventing strange behavior.

:sample
  .l-row
    .l-primary
      p: code.box Primary
      .l-row
        .l-primary: code.box Primary Primary
        .l-secondary: code.box Primary Secondary
    .l-secondary: code.box Secondary

h2.heading.heading--secondary Skip columns

p.paragraph.
  Sometimes it is desired to skip columns in a grid. You can do this
  with the <code>.l-col--offset-*</code> classes.

:sample
  .l-row
    .l-col.l-col--4
      code.box .l-col<br>.l-col--4
    .l-col.l-col--6.l-col--offset-2
      code.box .l-col<br>.l-col--6<br>.l-col--offset-2
  .l-row
    .l-col.l-col--medium-6
      code.box .l-col<br>.l-col--medium-6
    .l-col.l-col--medium-4.l-col--medium-offset-2
      code.box .l-col<br>.l-col--medium-4

h2.heading.heading--secondary Change column ordering

p.paragraph.
  You can easily change the order of columns with the
  <code>.l-col--push-*</code> and <code>.l-col--pull-*</code> classes.

:sample
  .l-row
    .l-col.l-col--8.l-col--push-4
      code.box .l-col<br>.l-col--8<br>.l-col--push-4
    .l-col.l-col--4.l-col--pull-8
      code.box .l-col<br>.l-col--4<br>.l-col--pull-8

// Copyright AXA Versicherungen AG 2015
